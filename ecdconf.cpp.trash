/**********************************************************************
2015-10-16
ECDConf : Conformational search based OpenBabel and GALib libraries
***********************************************************************/

// ---- For Customized code -------
#include <stdlib.h>
#include <iostream>
#include <vector>
#include <fstream>
#include <sstream>
#include <cstring>
#include <cstdio>

// ---- For OpenBabel Lib -----
// used to set import/export for Cygwin DLLs
#ifdef WIN32
#define USING_OBDLL
#endif

#include <openbabel/babelconfig.h>
#include <openbabel/mol.h>
#include <openbabel/parsmart.h>
#include <openbabel/rotamer.h>
//#include <unistd.h>
#include <openbabel/obconversion.h>
#include <openbabel/base.h>
#include <openbabel/forcefield.h>

using namespace std;
using namespace OpenBabel;
//
// ----  For GALib -----------
#include <stdio.h>
#include <math.h>

#include <ga/GASimpleGA.h>
#include <ga/GABin2DecGenome.h>
#include <ga/std_stream.h>


//#define cout STD_COUT
// ------------------------------------------------------------
//  customized class 
// ------------------------------------------------------------
class ECDtor {
  public:
    int a1,a2,a3,a4 ;  // the atomic id of a torsional bond. a2-a3 is intersection.
    float torsion_min, torsion_max, torsion_step;
    ECDtor () ;
    ECDtor ( int,int,int,int,float,float,float );
    void ini ();
};
// constructor:
  ECDtor::ECDtor () {
    a1=0 ; a2=0; a3=0; a4=0;
    torsion_min=0; torsion_max=360; torsion_step=0;
  }
  ECDtor::ECDtor (int b1, int b2, int b3, int b4, float t1, float t2, float t3) {
    a1=b1; a2=b2; a3=b3; a4=b4;
    torsion_min=t1; torsion_max=t2; torsion_step=t3;
  }
  void ECDtor::ini () {
    a1=0 ; a2=0; a3=0; a4=0;
    torsion_min=0; torsion_max=360; torsion_step=0;
  }  

// ------------------------------------------------------------
//  Gloable objects 
// ------------------------------------------------------------
float Objective(GAGenome &);
int gasimple();
// ----------------------------
  OBMol mol; 
  OBForceField* pFF;
  vector<ECDtor> whiteTorsion(1);
  vector<ECDtor> blockTorsion(1);

// ------------------------------------------------------------
//  Custom Function
// ------------------------------------------------------------
 // read input: - Molecular filename
 //             - torsion list with user-defined angle range
 //             - blocked torsion list for dihedrals that should be defined as unrotable
 void readInput (ifstream & ifs, string & stmp) {
  string line;
  bool read_whitelist=false, read_blocklist=false;
  int i=0 ;
  ECDtor d1;
  whiteTorsion.clear();
  blockTorsion.clear();
  while( getline(ifs,line) ) {
     // 1). A: remove comment inputs
     if (line.find("#") < line.size()) line.erase(line.find("#"));
     //     B: remove all "," in line
     while ( line.find(",") < line.size() ) line.erase(line.find(","),1);
     //     C: remove empty lines
     if (line.size() == 0 ) continue;
     // 2). setup section flag
     i++ ;
     if (line.find("whitelist") < line.size() ) {read_whitelist=true; read_blocklist=false ; i=0;}
     if (line.find("blocklist") < line.size() ) {read_whitelist=false; read_blocklist=true ; i=0;}

     // 3). read molecular input filename
     if ( line.find("molecule") < line.size() ) {
         istringstream iss(line);
         iss >> stmp >> stmp >>stmp ;
     }
     // 4) A: read whitelist
     if ( i>0 && read_whitelist ) {
         d1.ini() ;
         istringstream iss(line);
         iss >> d1.a1 >> d1.a2 >> d1.a3 >> d1.a4;
         if ( iss.good() ) iss >> d1.torsion_min >> d1.torsion_max;
         if ( iss.good() ) iss >> d1.torsion_step ;
         whiteTorsion.push_back(d1);
     }
     //    B: read blocklist
     if ( i>0 && read_blocklist ) {
         d1.ini() ;
         istringstream iss(line);
         iss >> d1.a1 >> d1.a2 >> d1.a3 >> d1.a4;
         if ( iss.good() ) iss >> d1.torsion_min >> d1.torsion_max;
         if ( iss.good() ) iss >> d1.torsion_step ;
         blockTorsion.push_back(d1);
     }
  } // end of reading file (while loop)
 };


///////////////////////////////////////////////////////////////////////////////
int main(int argc,char **argv)
{
  OBAtom *a1, *a2, *a3, *a4;
  char *FileIn =NULL;
  string stmp;
  bool debug=true;

   /*  */
      unsigned long atomid[4]= {0,0,0,0};// atoms of the tortional
      float angle =   0;      // tortional angle value to set in degree

   /* */


// 1). read command line for control parameters
   if (argc != 2) {
       cerr << "Usage: ecdconf <filename> " << endl;
       exit(-1);
   }
   FileIn = argv[1];

// 2).
   ifstream ifs;
   ifs.open(FileIn);
   readInput(ifs,stmp); // stmp carries filename for molecule
   ifs.close();
   strcpy(FileIn,stmp.c_str());

  OBConversion conv; //NF...
  OBFormat* format = conv.FormatFromExt(FileIn);
  if(!(format && conv.SetInAndOutFormats(format, format))) { //in and out formats same
    cerr << "obrotate: cannot read and/or write this file format!" << endl;
    exit (-1);
  } //...NF

  // Read the file
  ifs.open(FileIn);
  if (!ifs) {
    cerr << "ecdconf: cannot read input file!" << endl;
    exit (-1);
  }

  for (;;) {
    mol.Clear();
    //NF      ifs >> mol;                   // Read molecule
    conv.Read(&mol,&ifs); //NF
    if (mol.Empty())
      break;

/*
// -- newly added
    atomid[0] = 11;
    atomid[1] = 10;
    atomid[2] = 4;
    atomid[3] = 5;
    a1 = mol.GetAtom(atomid[0]);
    a2 = mol.GetAtom(atomid[1]);
    a3 = mol.GetAtom(atomid[2]);
    a4 = mol.GetAtom(atomid[3]);

    double torsion_value;
    torsion_value=mol.GetTorsion(a1,a2,a3,a4);
    cout << "torsion is:" << torsion_value << endl;
//    mol.SetTorsion(a1, a2, a3, a4, angle * DEG_TO_RAD);

    string ff="" ;
//    OBForceField* pFF = OBForceField::FindForceField(ff);
    pFF = OBForceField::FindForceField(ff);
    if (!pFF) {
      cerr << " could not find forcefield '" << ff << "'." <<endl;
      exit (-1);
    }
    pFF->SetLogFile(&cout);
    pFF->SetLogLevel(OBFF_LOGLVL_MEDIUM);

    double energy;
    mol.DeleteHydrogens();
       
    if (!pFF->Setup(mol)) {
      cerr << "could not setup force field." << endl;
      exit (-1);
    }
    
    energy = pFF->Energy(false);
    cout << "energy is:" << energy << endl ;
    cout << "energy is:" << pFF->E_Bond(false) << endl ;
    cout << "energy is:" << pFF->E_Angle(false) << endl ;
*/

    gasimple();

//----
    //NF      cout << mol;
//    conv.Write(&mol,&cout); //NF
  }

  return(0);
}
/* ----------------------------------------------------------------------------
   GALib code
---------------------------------------------------------------------------- */

int
gasimple()
{
  cout << "Example 2\n\n";
  cout << "This program generates a sequence of random numbers then uses\n";
  cout << "a simple GA and binary-to-decimal genome to match the\n";
  cout << "sequence.\n\n";

  unsigned int seed = 0; // evolution will be exactly the same each time if given a seed to use

// Declare variables for the GA parameters and set them to some default values.

  int popsize  = 25;
  int ngen     = 100;
  float pmut   = 0.01;
  float pcross = 0.6;

// Create a phenotype then fill it with the torsionals which will be mapped to binary
// n : number of torsionals
// The arguments to the add() method of a  Bin2Dec phenotype are :
//   - (1) number of bits, (2) min value, and (3) max value.

  GARandomSeed(seed);
  unsigned int n=whiteTorsion.size();
//  float min[n], max[n];

  float min[] = {0, 0,   0, 0};
  float max[] = {360, 360, 360,360};

  unsigned int i;
  unsigned int nbits=8; // number of bits for each gene

/*
  vector<ECDtor>::iterator it = whiteTorsion.begin() ;
  for(it=whiteTorsion.begin(), i=0;i<n;i++, it++) {
      min[i] = (*it).torsion_min ;
      max[i] = (*it).torsion_max ;
  }
*/
  GABin2DecPhenotype map;
  for(i=0; i<n; i++) map.add(nbits, min[i], max[i]);
    
//---debug 
  for(i=1;i<n;i++) 
    cout << min[i] << " " << max[i] << endl;
//-------


// Create the template genome using the phenotype map we just made.  The
// GA will use this genome to clone the population that it uses to do the
// evolution.  We pass the objective function to create the genome.

//  GABin2DecGenome genome(map, Objective, (void *)target);
  float * pktmp;
  pktmp = &min[0];
  GABin2DecGenome genome(map, Objective, (void *)pktmp);

// Now create the GA using the genome, set the parameters, and run it.

  GASimpleGA ga(genome);
  ga.populationSize(popsize);
  ga.nGenerations(ngen);
  ga.pMutation(pmut);
  ga.pCrossover(pcross);
  ga.evolve(seed);

// Dump the results of the GA to the screen.  We print out first what a random
// genome looks like (so we get a bit of a feel for how hard it is for the
// GA to find the right values) then we print out the best genome that the
// GA was able to find.

  genome.initialize();
  cout << "random values in the genome:\n";;
  for(i=0; i<map.nPhenotypes(); i++){
    cout.width(10); cout << genome.phenotype(i) << " ";
  }
  cout << "\n";

  genome = ga.statistics().bestIndividual();
  cout << "the ga generated:\n";
  for(i=0; i<map.nPhenotypes(); i++){
    cout.width(10); cout << genome.phenotype(i) << " ";
  }
  cout << "\n\n"; cout.flush();

// We could print out the genome directly, like this:
// cout << genome << "\n";

  return 0;
}
 

// For this objective function we try to match the values in the array of float
// that is passed to us as userData.  If the values in the genome map to 
// values that are close, we return a better score.  We are limited to positive
// values for the objective value (because we're using linear scaling - the
// default scaling method for SimpleGA), so we take the reciprocal of the 
// absolute value of the difference between the value from the phenotype and 
// the value in the sequence.
float
Objective(GAGenome& g)
{
  GABin2DecGenome & genome = (GABin2DecGenome &)g;
//  float *sequence = (float *)g.userData();

    cout << "bond energy is:" << pFF->E_Bond(false) << endl ;
  float value=genome.nPhenotypes();
  for(int i=0; i<genome.nPhenotypes(); i++)
//    value += 1.0 / (1.0 + fabs(genome.phenotype(i) - sequence[i]));
    {cout.width(10); cout << genome.phenotype(i) << " ";}

exit(1);
  return value;
}
